input {
	rabbitmq{
		host => [{% for host in groups['rabbit_mq_cluster'] %}"{{ host }}"{% if not loop.last %},{% endif %}{% endfor %}]
		ack => true
		prefetch_count => {{ batch_size }}
		#arguments => { "x-ha-policy" => "all" }
		durable => true
		exchange => "{{ initial_exchange }}"
		key => ""
		queue => "{{ initial_queue }}"
		vhost => "{{ rabbitmq_vhost }}"
		codec => json
		user => {{ rabbitmq_user }}
	    password => {{ rabbitmq_pass }}
	}
}
filter {
	grok {
		patterns_dir => "{{ logstash_formatted_patterns_path }}"
		match => { "message" => ["%{REGISTEREDORUPDATEDNSRECORD}", "%{REGISTEREDORUPDATEDARECORD}", "%{DEREGISTEREDRECORD}"]}
	}
	if "_grokparsefailure" in [tags] {
		drop {}
	}
	mutate{
		strip => ["domain_name"]
	}
	if([sign] == "+"){
		mutate {
			add_field => { "domain_name_exact" => "%{domain_name}"}
		}
		ruby {
			code => '
				event.set("domain_name_length", event.get("domain_name_exact").length);
				event.set("is_registered", true);
				'
		}
		if([type] == "NS"){
			#mutate{
			#	split => {"name_servers" => " "}
			#}
			ruby {
			code => '
				event.set("name_servers", event.get("name_servers").split(" "));
	            event.set("name_servers_exact", event.get("name_servers"));
	            event.set("past_name_servers", event.get("name_servers"));
	        	event.set("past_name_servers_exact", event.get("name_servers"));
	        	'
			}
		}
		if([type] == "A"){
			ruby{
				code => '
				event.set("ip_address", event.get("ip_address").split(" "));
				'
			}
		}
	}
	mutate{
		remove_field => ["message", "date", "host"]
		#convert => { "is_registered" => "boolean"}
	}
	ruby{
		code => '
			event.set("deregistered_history", []);
			event.set("registered_history", []);
		'
	}
}
output {
	elasticsearch {
		hosts => [{% for host in groups['es_data_nodes'] %}"{{ host }}"{% if not loop.last %},{% endif %}{% endfor %}]
		index => "{{ dest_index }}"
		routing => "%{domain_name}"
		manage_template => false
		flush_size => {{ batch_size }}
		action => "index"
		document_id => "%{domain_name}"
	}
	#stdout{codec=>rubydebug}
}